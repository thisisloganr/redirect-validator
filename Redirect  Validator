import pandas as pd
import requests
import os
from datetime import datetime
import numpy as np

# Set start time
startTime = datetime.now()

# File request
print("Enter Filepath or URL:")
fp = input()
#Cleans up a standard filepath - reverses slashes and removes double quotes
fp = fp.replace("\\","/").replace("\"","").replace("edit?pli=1#gid","export?format=csv&gid").replace("edit#gid","export?format=csv&gid")

# Create dataFrame based on file type
if "xlsx" in fp:
    df = pd.read_excel(fp)
    fty = "xlsx"
elif "docs.google" in fp:
    df = pd.read_csv(fp)
    fty = "sheet"
elif "csv" in fp:
    df = pd.read_csv(fp)
    fty = "csv"
else:
    print("Invalid File Type")

# Hostname in original file?
print("\n" + "Append the hostname? y/n")
host = input()

# Append hostname if answered yes above
if host == "y":
    print("\n" + "Hostname:")
    site = input()

    # Adds hostname to path
    df[list(df.columns)[0]]  = site.replace(".com/",".com").replace(".org/",".org") + df[list(df.columns)[0]]
    df[list(df.columns)[1]] = site.replace(".com/",".com").replace(".org/",".org") + df[list(df.columns)[1]]
else:
    pass


# Skip Test/Prod Question if Hostname was entered
if host == "y":
    print("\n" + "Test or Prod?")
    env = input()
else:
    print("\n" + "Test or Prod?")
    env = input()
    # User input for production and test hostnames
    if env == "Test":
        print("\n" + "Prod Hostname:")
        prod = input()
        print("\n" + "Test Hostname:")
        test = input()

        # Replaces Prod hostname with Test hostname
        df = df.replace({prod:test}, regex = True)
    else:
        pass

# Show Origin Response Code
def url_access(x):
    return requests.head(x).status_code
df['Origin Status Code'] = df[list(df.columns)[0]].apply(url_access)

# Get Dest
def url_dest(x):
    return requests.head(x,allow_redirects=True).url

# Add Destination Column
df['Actual Destination'] = df[list(df.columns)[0]].apply(url_dest)

# Show Destination Response Code
def url_access(x):
    return requests.head(x).status_code
df['Destination Status Code'] = df[list(df.columns)[3]].apply(url_access)

# Add match column
df['Match?'] = (df[list(df.columns)[1]] == df['Actual Destination']).astype(str)

# Add match column
df['Status Check'] = (df['Destination Status Code'] == 200).astype(str)
df['IssuesT'] = df['Status Check'] + df['Match?']
df['Redirect Status'] = df['IssuesT'].str.contains("False")
df = df.drop(columns=['Status Check', 'IssuesT'])
df = df.replace({'Redirect Status':{True:"Problematic"}}).replace({'Redirect Status':{False:"Good"}}).replace({'Match?':{"True":"Yes"}}).replace({'Match?':{"False":"No"}})

# Sort by Issues Value (moves mismatches up to the top)
df = df.sort_values(by=['Redirect Status'], ascending = False)

# Output Dataframe
print(df)

# Count how many correct and inccorect redirects
dfC = df['Redirect Status'].value_counts()
print("\n" + "Summary:")
print(dfC)

# How long did the script take to run?
print("\n" + "Time to Run: " + str(datetime.now() - startTime))

# Writes new .csv file
print("\n" + "Export? (y/n)")
exp = input()
if exp == "y":
    if fty == "xlsx":
        df.to_csv(os.path.dirname(fp)+"/" + os.path.basename(fp).replace(".xlsx","") + " - " + env + " Validation.csv")
        pass
    elif fty == "csv":
        df.to_csv(os.path.dirname(fp)+"/" + os.path.basename(fp).replace(".csv","") + " - " + env + " Validation.csv")
        pass
    elif fty == "sheet":
        print("\n" + "Enter File Name:")
        fn = input()
        path = os.path.join(os.path.expanduser("~"), "Desktop", fn + " Validation.csv")
        df.to_csv(path)
        pass
    else:
        pass
else:
    pass
    
# Sample file: https://docs.google.com/spreadsheets/d/1x2xr5Smvb2Jla8DGIApZa7caQ1daqIfMNQONfFazft8/edit#gid=0
